$location = Get-Location



function intro{

"████████╗██████╗  █████╗ ██╗   ██╗██╗███████╗    ██████╗      ██████╗ ██╗████████╗██╗  ██╗██╗   ██╗██████╗ 
╚══██╔══╝██╔══██╗██╔══██╗██║   ██║██║██╔════╝    ╚════██╗    ██╔════╝ ██║╚══██╔══╝██║  ██║██║   ██║██╔══██╗
   ██║   ██████╔╝███████║██║   ██║██║███████╗     █████╔╝    ██║  ███╗██║   ██║   ███████║██║   ██║██████╔╝
   ██║   ██╔══██╗██╔══██║╚██╗ ██╔╝██║╚════██║    ██╔═══╝     ██║   ██║██║   ██║   ██╔══██║██║   ██║██╔══██╗
   ██║   ██║  ██║██║  ██║ ╚████╔╝ ██║███████║    ███████╗    ╚██████╔╝██║   ██║   ██║  ██║╚██████╔╝██████╔╝
   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝  ╚═══╝  ╚═╝╚══════╝    ╚══════╝     ╚═════╝ ╚═╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ 
                                                                                                           `n...Actions.`n`n"
$tyaml = ConvertFrom-Yaml -Path "$location\.travis.yml" #Travis Yaml


Write-Host "Hi! Make sure you are in the git repo you want to create a git action for.`nAlso make sure the file you want to convert is named .travis.yml and that it also exists inside the repository parent folder.`n`n" -ForegroundColor Cyan

Read-Host "Press enter to continue..."

createGitAction
}

#check for PSYAML
function check-PSYaml{
if((Test-Path C:\Windows\System32\WindowsPowerShell\v1.0\Modules\PSYaml\PSYaml\ -PathType Any) -ne $true){
Write-Host "Please install PSYaml from https://github.com/Phil-Factor/PSYaml`nYou'll need to clone the repository and then copy it to the PSModules directory.`n`nThen once you do that you'll need to use Import-Module on the actual .psm1 module file in the ./PSYaml/PSYaml/ `ndirectory." -ForegroundColor Red

break
}


}

#Install PSYAML if not there (feature reqeust)
function install-PSYaml{
}

#update Travis Yaml variable
function get-yaml{


$tyaml = ConvertFrom-Yaml -Path $location\.travis.yml
}

function steps{
$stepArray = $tyaml["script"]

$constructedString = ""
$counter = 0
$name = "step"

foreach($step in $stepArray)
{
    
 $name = "step" + $counter   
 $code = $step
 $constructedString += 
"
      - name: $name
      - run: $code

         
"
$counter++

}

return $constructedString
}
#main function
function createGitAction{

get-yaml
$installs = $tyaml["install"]

$stepsString = steps

$defaultExample = "# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: install-requirements 
        run:  $installs
" + $stepsString


if((Test-Path -PathType leaf -Path .\.github\workflows\main.yml) -eq $true){
Remove-Item -Path .\.github\workflows\main.yml
}
if((Test-Path -PathType Container -Path .\.github\workflows) -ne $true){
New-Item -ItemType Directory -Path ./.github/workflows/
}

$defaultExample | Out-File -FilePath ./.github/workflows/main.yml

}

function selectTags{
$singleLinePattern = "(.*)(:\s+)(.*)"
$versionMatch = "(?<version>python:)"

$output = Get-ChildItem '.\.travis.yml' |
    Select-String -Pattern $singleLinePattern |
    Foreach-Object {
       
    
     $tag, $content = write-host $_.Matches[0].Groups[1..7].Value   # this is a common way of getting the groups of a call to select-string      

        [PSCustomObject] @{
            Tag = $tags
            Content = $content
        }
    }

    return $output

}

function selectContent{
$steps = selectTags
[String]$file = Get-Content -Path '.\.travis.yml'
$contents = @()

foreach($step in $steps){

$contents = $file.Split(': ') 
}
return $contents
}

function endDialog{
Write-Host "`nSuccess! Check in the \.github\workflows\main.yml for the results!" -ForegroundColor "Green"
}

intro
endDialog