import os
import json
import csv
import requests
import time
import sys
import git

class PyExploitDb:
    def __init__(self):
        self.cveToExploitMap = {}
        self.currentPath = os.path.dirname(os.path.abspath(__file__))
        self.edbidToCveFile = self.currentPath + "/edbidToCve.json"
        self.cveToedbidFile = self.currentPath + "/cveToedbid.json"
        self.requestCoolOffTime = 1
        self.debug = False
        pass


    def openFile(self, exploitMap = "cveToEdbid.json"):
        if not os.path.isdir(self.currentPath + "/exploit-database"):
            print("Cloning exploit-database repository")
            git.Repo.clone_from("https://github.com/offensive-security/exploit-database.git", "./exploit-database")
            print("Updating db...")
            self.updateDb()
        else:
            print("Pulling exploit-database updates...")
            git.Git('exploit-database').pull('origin', 'master')
            print("Updating db...")
            self.updateDb()
            print("Loading database...")
            with open(self.currentPath + "/" + exploitMap) as fileData:
                cveToExploitMap = json.load(fileData)
                self.cveToExploitMap = cveToExploitMap
                if self.debug == True:
                    print(self.cveToExploitMap)


    def getCveDetails(self, cveSearch):
        files = open(self.currentPath + "/exploit-database/files_exploits.csv")
        reader = csv.reader(files)
        next(reader)
        result = {}
        found = False
        for row in reader:
            edb, fileName, description, date, author, platform, exploitType, port = tuple(row)
            if edb in self.cveToExploitMap[cveSearch]:
                found = True
                result['edbid'] = edb
                result['exploit'] = self.currentPath + "/exploit-database/" + fileName
                result['date'] = date
                result['author'] = author
                result['platform'] = platform
                result['type'] = exploitType
                if self.debug == True:
                    print("Exploit DB Id: {0}".format(edb))
                    print("File: {0}".format(self.currentPath + "/exploit-database/" + fileName))
                    print("Date: {0}".format(date))
                    print("Author: {0}".format(author))
                    print("Platform: {0}".format(platform))
                    print("Type: {0}".format(exploitType))
                if port != "0":
                    result['port'] = port
                    if self.debug == True:
                        print("Port: {0}".format(port))
        if not found:
            if self.debug == True:
                print("ERROR - No EDB Id found")
        files.close()
        return result


    def searchCve(self, cveSearch):
        if not cveSearch:
            return []
        cveSearch = cveSearch.upper()
        print(cveSearch)
        if cveSearch in self.cveToExploitMap:
            if self.debug == True:  
                print("Found")
            cveData = self.getCveDetails(cveSearch)
            if cveData:
                return cveData
            else:
                return cveSearch
        return []


    def updateDb(self):
        data = {}
        if not os.path.exists(self.edbidToCveFile):
            os.system("touch {0}".format(self.edbidToCveFile))
        with open(self.edbidToCveFile) as fileData:
            data = json.load(fileData)
        files = open(self.currentPath + "/exploit-database/files_exploits.csv")
        reader = csv.reader(files)
        next(reader)
        reader = list(reader)
        edbCount = len(reader)
        headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
        def locations_of_substring(string, substring):
           import re
           results = [m.start() for m in re.finditer(substring, string)]
           return results
        print("Refreshing EDBID-CVE mapping")
        for i in range(edbCount):
            edb = tuple(reader[i])[0]
            if edb in data:
                if self.debug == True:
                    print("Skipping {0}".format(str(edb)))
                pass
            else:
                content = ""
                while True:
                    try:
                        requestUri = "https://www.exploit-db.com/exploits/{0}".format(str(edb))
                        if self.debug == True:
                            print("Requesting {0}".format(requestUri))
                        r = requests.get(requestUri, headers = headers)
                        content = r.content.decode("ISO-8859-1")
                    except Exception as e:
                        if self.debug == True:
                            print("Error {0}".format(e))
                        time.sleep(self.requestCoolOffTime)
                        continue
                    finally:
                        break
                indexes = locations_of_substring(content, 'https://cve.mitre.org/cgi-bin/cvename.cgi\?name=CVE-')
                used = []
                for pos in indexes:
                      cve = r.content[pos + 47: pos + 47 + 13]
                      if cve in used:
                          continue
                      used.append(cve)
                data[edb] = used
        with open(self.edbidToCveFile, "w") as fileData:
            json.dump(data, fileData, indent = 2)
        self.cveToExploitMap = {}
        for k, v in data.items():
            for e in v:
                self.cveToExploitMap[e] = self.cveToExploitMap.get(e, [])
                self.cveToExploitMap[e].append(k)
        with open(self.cveToedbidFile, "w") as fileData:
            json.dump(self.cveToExploitMap, fileData, indent = 2)


def test():
    pEdb = PyExploitDb()
    pEdb.debug = True
    pEdb.openFile()
    results = pEdb.searchCve("CVE-2018-1459")
    if results:
        print(results)
        print('PASS')
    else:
        print('FAIL')
        sys.exit(1)


if __name__ == "__main__":
    test()
